import os
import gc
import random
from datetime import datetime, timedelta

import joblib
import re
from natasha import Segmenter, NewsEmbedding, NewsMorphTagger, MorphVocab, Doc
from nltk.corpus import stopwords
import nltk


import requests
import logging
import torch
from sqlalchemy.orm import Session
from typing import Union, Optional
from fastapi import FastAPI, Request, Depends, Body
from fastapi.responses import RedirectResponse
from transformers import BertTokenizer, BertForSequenceClassification
from contextlib import asynccontextmanager

from database import SessionLocal, MyBot, UserRequests, MLPredict, Users, AuthTokens, init_db
from preprocessing import lemmatize_natasha_batch, preprocess_text_batch 

import base64

nltk.download('stopwords')



# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
pipeline = joblib.load('greeting_classifier4.joblib')

HELLO_MESSAGES = ['‚ÄØü§ñ‚ÄØ–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. \n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.',
                  '‚ÄØü§ñ‚ÄØ–í—ã –ø–∏—à–µ—Ç–µ –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. \n –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —á—ë–º —Å–æ—Å—Ç–æ–∏—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω—É–∂–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.',
                  'ü§ñ‚ÄØ–í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º. \n –ü—Ä–æ—Å–∏–º –∫—Ä–∞—Ç–∫–æ –∏–∑–ª–æ–∂–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ –º—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.',
                  '‚ÄØü§ñ‚ÄØ–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º. \n –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–∞–∫–æ–Ω–∏—á–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É.',]

def check_message(message: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.
    
    Args:
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º, –∏–Ω–∞—á–µ False.
    """


    prediction = pipeline.predict([message])
    logger.warning(f"Message: {message}, Prediction: {prediction}")
    return prediction[0] == 0

# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
file_path = os.getcwd() + "/Futuristic Logo Design Featuring Geometric Robot Head.png"

with open(file_path, "rb") as image_file:
    encoded_string = base64.b64encode(image_file.read()).decode('utf-8')


def predict_label(text, model, tokenizer, categories, device):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True).to(device)
    model.eval()
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        predicted_label = torch.argmax(logits, dim=1).item()
    return categories[predicted_label]


def predict(request_id: int, db: Session):
    """ Predicts the category of a user request using a pre-trained BERT model.

    Args:
        request_id (int): The ID of the user request to predict.
        db (Session): The database session.

    Returns:
        int: The ID of the prediction result.
    """

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    path_dict = os.getcwd() + '/bert_model_final_v2.pth'
    model_name = 'DeepPavlov/rubert-base-cased'
    model_loaded = BertForSequenceClassification.from_pretrained(model_name, num_labels=3)
    model_loaded.load_state_dict(torch.load(path_dict, map_location=device))
    model_loaded.to(device)
    tokenizer = BertTokenizer.from_pretrained(model_name)
    categories = ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É', '–û–ø–ª–∞—Ç–∞', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
    user_request = db.query(UserRequests).filter(UserRequests.request_id == request_id).first()
    predict_category = predict_label(
        user_request.raw_message,
        model=model_loaded,
        tokenizer=tokenizer,
        categories=categories,
        device=device
    )
    ml_predict = MLPredict(
        request_id=user_request.request_id,
        predict_label=predict_category
    )
    db.add(ml_predict)
    db.commit()
    db.refresh(ml_predict)
    # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ —á–∏—Å—Ç–∏–º –ø–∞–º—è—Ç—å
    del model_loaded
    del tokenizer
    gc.collect()
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
    return ml_predict.predict_id

def start_to_process(predict_id: int, db: Session, chat_id: Optional[int] = None):
    ml_predict = db.query(MLPredict).filter(MLPredict.predict_id == predict_id).first()

    if not ml_predict:
        return {"error": "Prediction not found"}
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    user_id = db.query(UserRequests).filter(UserRequests.request_id == ml_predict.request_id).first().user_id
    token = db.query(AuthTokens).filter(AuthTokens.user_id == user_id).order_by(AuthTokens.token_id.desc()).first()

    if ml_predict.predict_label == '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É':
        oueue_id = 54
    elif ml_predict.predict_label == '–û–ø–ª–∞—Ç–∞':
        oueue_id = 56
    elif ml_predict.predict_label == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        oueue_id = 52
    else:
        return {"error": "Unknown category"}
        
    if datetime.now() < token.expires_at:
        data = {'QUEUE_ID': oueue_id,
                'CHAT_ID': chat_id,          
                'LEAVE': 'Y',
                'auth': token.access_token}
        response = requests.post("https://sip.bitrix24.kz/rest/imopenlines.bot.session.transfer", json=data)
        logger.warning(f"chat_id: {chat_id}")
        logger.warning(f"Response from imopenlines.bot.session.transfer: {response.text}")
        if response.status_code == 200:
            data = {'CHAT_ID': chat_id,
                    'BOT_ID': 460,
                    'auth': token.access_token,
            }
            response = requests.post("https://sip.bitrix24.kz/rest/imbot.chat.leave", json=data)
            logger.warning(f"Response from imbot.chat.leave: {response.text}")
            logger.warning(f"Workflow started successfully for predict_id {predict_id}")
        else:
            logger.error(f"Failed to start workflow for predict_id {predict_id}: {response.text}")
            return {"error": "Failed to start workflow"}
    else:
        token_url = "https://oauth.bitrix.info/oauth/token/"
        data = {
            "grant_type": "refresh_token",
            "client_id": CLIENT_ID,
            "client_secret": CLIENT_SECRET,
            "refresh_token": token.refresh_token,
        }
        response = requests.post(token_url, data=data)
        if response.status_code == 200:
            token_data = response.json()
            token.access_token = token_data.get('access_token', '')
            token.refresh_token = token_data.get('refresh_token', '')
            token.expires_at = datetime.now() + timedelta(seconds=int(token_data.get('expires_in', 3600)))
            db.commit()
            data = {'QUEUE_ID': oueue_id,
                'CHAT_ID': chat_id,          
                'LEAVE': 'Y',
                'auth': token.access_token}
            response = requests.post("https://sip.bitrix24.kz/rest/imopenlines.bot.session.transfer", json=data)
            logger.warning(f"chat_id: {chat_id}")
            logger.warning(f"Response from imopenlines.bot.session.transfer: {response.text}")
            if response.status_code == 200:
                data = {'CHAT_ID': chat_id,
                    'BOT_ID': 460,
                    'auth': token.access_token,
                    }
                response = requests.post("https://sip.bitrix24.kz/rest/imbot.chat.leave", json=data)
                logger.warning(f"Response from imbot.chat.leave: {response.text}")
                response = requests.post("https://sip.bitrix24.kz/rest/imbot.chat.leave", json=data)
                logger.warning(f"Response from imbot.chat.leave: {response.text}")
            if response.status_code == 200:
                logger.warning(f"line workflow started successfully for predict_id {predict_id} after token refresh")
            else:
                logger.error(f"Failed to start workflow after token refresh for predict_id {predict_id}: {response.text}")
                return {"error": "Failed to start workflow after token refresh"}    
    return {"message": "Processing started", "predict_id": predict_id}


# --- —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    init_db()
    yield
    pass

app = FastAPI(lifespan=lifespan)


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

path_to_file = os.path.dirname(os.path.abspath(__file__)) + '/loger/fastapi.log'


logging.basicConfig(
    filename=path_to_file,
    filemode='a+',
    #encoding='utf-8',
    level=logging.WARNING,
    format="%(asctime)s - %(name)s - Systems info - %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)


CLIENT_ID = os.getenv("CLIENT_ID", "local.684ef2bc59c7f8.87517346")
#CLIENT_SECRET = os.getenv("CLIENT_SECRET", "9CWQgq7Da4i46gI5qZkntOKfGX8gT2WwgJFQgF770NX22O4qno")

def red_secret(secret_name):
    try:
        with open(secret_name, 'r') as file:
            secret = file.read().strip()
            return secret
    except FileNotFoundError:
        logger.error(f"File not found: {secret_name}")
        return None
    except Exception as e:
        logger.error(f"Error reading {secret_name}: {e}")
        return None

CLIENT_SECRET = red_secret('secret_id')
# –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ state –Ω—É–∂–Ω–∞ —Å–≤—è–∑–∫–∞ –∫–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—Ç—å –±—É–¥–µ—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –æ—Ç –∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å

@app.get("/authorize")
async def start_auth():
    params = {
        "client_id": CLIENT_ID,
        "state": 8,
        "redirect_uri": "https://api.deltafeniks.kz/log",
    }
    url = "https://sip.bitrix24.kz/oauth/authorize/"
    redirect_url = requests.Request('GET', url, params=params).prepare().url
    return RedirectResponse(url=redirect_url)


@app.get("/log")
async def authorize(request: Request, db: Session = Depends(get_db)):
    params = dict(request.query_params)
    code = params.get("code")
    state = params.get("state")
    domain = params.get("domain")
    member_id = params.get("member_id")
    scope = params.get("scope")
    server_domain = params.get("server_domain")

    if code:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ–±–º–µ–Ω—è—Ç—å code –Ω–∞ access_token
        #return {"code": code, "state": state, "domain": domain, "member_id": member_id, "scope": scope, "server_domain": server_domain}
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ access_token
        token_url = "https://oauth.bitrix.info/oauth/token/"
        data = {
            "grant_type": "authorization_code",
            "client_id": CLIENT_ID,
            "client_secret": CLIENT_SECRET,
            "code": code,
        }
        response = requests.post(token_url, data=data)
        try:
            token_data = response.json()
        except Exception:
            token_data = {"error": "Invalid response", "text": response.text}

        bot = db.query(MyBot).order_by(MyBot.bot_id.desc()).first()
        if not bot:
            data_post = {
                'CODE' : bot.code,
                'auth': token_data.get('access_token', ''),
                'TYPE': bot.type,
                'OPENLINE': bot.openline,
                'auth': token_data.get('access_token', ''),
                'EVENT_HANDLER': 'https://api.deltafeniks.kz/bot/event',
                'EVENT_WELCOME_MESSAGE': 'https://api.deltafeniks.kz/bot/welcome',
                'PROPERTIES': {
                    'NAME': bot.name,
                    'COLOR': bot.color,
                    'EMAIL': bot.email,
                    'PERSONAL_BIRTHDAY': str(bot.personal_birthday) if bot.personal_birthday else None,
                    'WORK_POSITION': bot.work_position,
                    'PERSONAL_WWW': bot.personal_www,
                    'PERSONAL_PHOTO': encoded_string,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                }, 

            }
        
            result = requests.post("https://sip.bitrix24.kz/rest/imbot.register", json=data_post)
            if isinstance(result, dict):
                bot_id = result.get('BOT_ID')
            elif isinstance(result, int):
                bot_id = result
            else:
                bot_id = None
            bot.bitrix_bot_id = bot_id.json().get('result', {}).get('BOT_ID')
            db.commit()
            db.refresh(bot)
            return bot_id.json()

    else:
        return {"error": "No code received"}


# –ß–∞—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏

@app.post("/create/bot")
async def create_bot(data = Body(), db: Session = Depends(get_db)):
    my_bot = MyBot(
        bitrix_bot_id=data.get("bitrix_bot_id"),
        code=data.get("code", "NewBot"),
        type=data.get("type", "O"),
        openline=data.get("openline", "Y"),
        name=data.get("name", "NewBot"),
        color=data.get("color", "GREEN"),
        email=data.get("email"),
        personal_birthday=data.get("personal_birthday", "2025-06-19"),
        work_position=data.get("work_position", "–¢–µ—Å—Ç—Ä–∏–æ–≤—â–∏–∫ API"),
        personal_www=data.get("personal_www", "https://api.deltafeniks.kz/info"))
    db.add(my_bot)
    db.commit()
    db.refresh(my_bot)
    return {"message": "Bot created successfully", "bot_id": my_bot.bot_id}



 # –¥–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç—É.

# @app.post("/bot/event")
# async def bot_event_handler(event: dict, db: Session = Depends(get_db)):
#     # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç —á–∞—Ç-–±–æ—Ç–∞
#     # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è
#     logger.warning(f"Received event: {event}")
#     return {"message": "Event received", "event": event}


# –¥–æ–¥–µ–ª–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–æ–ø—Ä–æ—Å —Å –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫—É—Ç, –¥—É–º–∞—é –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∞–º–æ–º—É —á–µ–º –ø–æ–ª—É—á–∞—Ç—å
#–æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
@app.post("/bot/event")
async def bot_event_handler(request: Request, db: Session = Depends(get_db)):
    form = await request.form()
    event_data = dict(form)
    expires_in = int(event_data.get('auth[expires_in]', 3600))  # 3600 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    expires_at = datetime.now() + timedelta(seconds=expires_in)
    user_check = db.query(Users).filter(Users.bitrix24_id == event_data.get('data[USER][ID]')).first()
    if not user_check:
        user_check = Users(
            bitrix24_id=event_data.get('data[USER][ID]'),
            name=event_data.get('data[USER][FIRST_NAME]'),
            last_active= datetime.now(),)
        db.add(user_check)
        db.commit()
        db.refresh(user_check)
        logger.warning(f"New user added: {user_check.name} with ID {user_check.bitrix24_id}")
    auth_token =  AuthTokens(
        user_id=user_check.user_id,
        access_token=event_data.get('auth[access_token]'),
        expires_at=expires_at,
        refresh_token=event_data.get('auth[refresh_token]'),
        score=event_data.get('auth[scope]'),
    )
    db.add(auth_token)
    db.commit()
    db.refresh(auth_token)

    # –¥–æ–±–∞–≤–ª—è—é –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    raw_message = event_data.get('data[PARAMS][MESSAGE]')

    if not raw_message:
        logger.warning(f"Empty message received from Bitrix event: {event_data}")
        return {"error": "Empty message", "event": event_data}
    user_request = UserRequests(
        user_id=user_check.user_id,
        raw_message=raw_message,
    )
    db.add(user_request)
    db.commit()
    db.refresh(user_request)

    check = check_message(user_request.raw_message)
    logger.warning(f"Message check result: {check} for user {user_check.name} with ID {user_check.bitrix24_id}")
    if check and event_data.get('data[USER][IS_BOT]') == 'N':
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        # –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        # –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –∏ –¥–∞–ª–µ–µ —Ç—É–¥–∞ —É–∂–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ
    
        message = random.choice(HELLO_MESSAGES)
        data = {'BOT_ID': 460,
                'MESSAGE': message,
                'DIALOG_ID': event_data.get('data[PARAMS][DIALOG_ID]'),
                'auth': auth_token.access_token}
        response = requests.post("https://sip.bitrix24.kz/rest/imbot.message.add", json=data)
        logger.warning(f"Response from imbot.message.add: {response.text}")
        logger.warning(f"User {user_check.name} sent a greeting message: {user_request.raw_message}")
        return {"message": "Greeting message received", "user": user_check.name}

    predict_id = predict(user_request.request_id, db)
    start_to_process(predict_id, db, event_data.get('data[PARAMS][CHAT_ID]'))
    logger.warning(f"New user request added: {user_request.raw_message} for user {user_check.name}")
    logger.warning(f"auth token: {auth_token.access_token} expires at {auth_token.expires_at}")
    logger.warning(f"message: Event received, event: {event_data}")
    #logger.warning(f"Category predicted: {category_predict} for request ID {user_request.request_id}")
    return {"message": "Event received", "event": event_data}
